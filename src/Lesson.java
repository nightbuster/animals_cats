import java.lang.reflect.Array;
import java.util.Arrays;

/**
 * Задание 1:
 * Создать классы Собака и Кот с наследованием от класса Животное.
 * Все животные могут бежать и плыть.
 * В качестве параметра каждому методу передается длина
 * препятствия.
 * Результатом выполнения действия будет печать в консоль. (Например,
 * dogBobik.run(150); → 'Бобик пробежал 150 м.');
 *
 * У каждого животного есть ограничения на действия (бег: кот 200 м., собака 500 м.;
 * плавание: кот не
 * умеет плавать, собака 10 м.).
 *
 * Добавить подсчет созданных котов, собак и животных.
 *
 *
 * Расширить задачу, добавив для котов возможность кушать из миски, выполнив следующие пункты:
 * • Сделать так, чтобы в миске с едой не могло получиться отрицательного количества еды
 * (например, в миске 10 еды, а кот пытается покушать 15-20).
 *
 * • Каждому коту нужно добавить поле сытость (когда создаем котов, они голодны). Если коту
 * удалось покушать (хватило еды), сытость = true.
 *
 * • Считаем, что если коту мало еды в миске, то он её просто не трогает, то есть не может быть
 * наполовину сыт (это сделано для упрощения логики программы).
 *
 * • Создать массив котов и миску с едой, попросить всех котов покушать из этой миски и потом
 * вывести информацию о сытости котов в консоль.
 *
 * • Добавить метод, с помощью которого можно было бы добавлять еду в миску.
 */
public class Lesson {
    public static void main(String[] args) {
        Bowl.addFood(6);
        Cat[] cats = new Cat[5];
        cats[0] = new Cat("Cat5");
        cats[1] = new Cat("Cat1");
        cats[2] = new Cat("Cat2");
        cats[3] = new Cat("Cat3");
        cats[4] = new Cat("Cat4");

        for (int i = 0; i < cats.length; i++) {
            cats[i].eat(3);
            if (i == 2) {
                Bowl.addFood(5);
            }
        }

        System.out.println(Arrays.toString(cats));
    }
}
